{"id":-1,"name":"Onboarding diagram","userId":-1,"createdAt":"","updatedAt":"","content":{"items":[{"uid":"bI0wBh3Ufk","position":{"x":120,"y":-270},"sizes":{"width":410,"height":200},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"heading","attrs":{"level":2},"content":[{"type":"text","text":"Welcome to CodeDiagram üòÑ"}]},{"type":"paragraph"},{"type":"heading","attrs":{"level":3},"content":[{"type":"text","text":"This is a visual note-taking tool that helps you visualize your code flow better."}]}]},"color":{"bgColor":"hsla(33, 94%, 80%, 1)","bgName":"orange-l"},"nodeType":"block"},{"uid":"hyyRZE3E8u","position":{"x":-270,"y":420},"sizes":{"width":360,"height":240},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"filePathNode","content":[{"text":"src/app.js","type":"text","marks":[{"type":"bold"}]}]},{"type":"codeBlock","attrs":{"language":"javascript"},"content":[{"text":"function index() {\n  greeting()\n  makeACofee()\n  startCoding()\n}","type":"text"}]}]},"nodeType":"block"},{"uid":"6ZopTaEaDZ","position":{"x":180,"y":440},"sizes":{"width":360,"height":200},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"filePathNode","content":[{"text":"src/greeting.js","type":"text","marks":[{"type":"bold"}]}]},{"type":"codeBlock","attrs":{"language":"javascript"},"content":[{"text":"function greeting() {\n  console.log('Hello there')\n}","type":"text"}]}]},"color":{"bgColor":"hsla(214, 17%, 29%, 1)","bgName":"gray"},"nodeType":"block"},{"uid":"ytXK_ayIc1","position":{"x":120,"y":0},"sizes":{"width":410,"height":250},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"heading","attrs":{"level":1},"content":[{"type":"text","text":"To make a Code box"}]},{"type":"orderedList","attrs":{"start":1},"content":[{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Split your editor vertically"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Open your code (for example: "},{"type":"text","marks":[{"type":"code"}],"text":"app.js"},{"type":"text","text":") side-by-side with the "},{"type":"text","marks":[{"type":"bold"}],"text":"\"Code Diagram\" tab"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Select some of your codes"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Open the VSCode command > \""},{"type":"text","marks":[{"type":"bold"}],"text":"Code Diagram: Snip Code"},{"type":"text","text":"\""}]}]}]}]},"color":{"bgColor":"hsla(33, 94%, 80%, 1)","bgName":"orange-l"},"nodeType":"block"},{"uid":"hi9UbVX1_s","position":{"x":-340,"y":-280},"sizes":{"width":280,"height":200},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"More settings are in the top left menu:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Export to PNG"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Light and Dark themes"}]}]}]}]},"nodeType":"block"},{"uid":"HduNR37Az-","position":{"x":690,"y":-270},"sizes":{"width":400,"height":333},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"heading","attrs":{"level":1},"content":[{"type":"text","text":"Some tips "},{"type":"text","marks":[{"type":"bold"}],"text":"‚òÄÔ∏è"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Double click on a blank area to create a new diagram"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Quick delete"},{"type":"text","text":": select box and press Delete key"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Undo"},{"type":"text","text":": Cmd/Ctrl + Z"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Shortcuts"},{"type":"text","text":": open VSCode \"Keyboard Shortcuts\" and find \"Code Diagram\", there will be some commands such as:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Snip Code"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Snip File"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Open Diagram"}]}]}]}]}]}]},"color":{"bgColor":"hsla(211, 33%, 22%, 1)","bgName":"blue"},"nodeType":"block"},{"uid":"8FX8zhZvfx","position":{"x":400,"y":340},"sizes":{"width":190,"height":88},"autoheight":true,"blockContent":{"text":"üí° Click the crosshair icon\nat top-right of the box\nto jump back to your source codes"},"nodeType":"text"},{"uid":"ssl8nJUAUs","position":{"x":-330,"y":800},"sizes":{"width":600,"height":333},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","content":[{"type":"text","marks":[{"type":"bold"}],"text":"components/Dashboard.vue"}]},{"type":"heading","attrs":{"level":1},"content":[{"type":"text","text":"A more complex example"}]},{"type":"codeBlock","attrs":{"language":"vue"},"content":[{"type":"text","text":"<template>\n  <div class=\"dashboard container mx-auto my-24 grid grid-cols-2 gap-4\">\n    <gh-pr-count uid=\"prc1\" class=\"h-ful\" />\n    <gh-pr-time uid=\"prt1\" class=\"h-full\" />\n    <gh-commit-review uid=\"ghcr1\" class=\"h-full\" />\n    <gh-review-merge uid=\"ghrm1\" class=\"h-full\" />\n    <gh-pr-opening uid=\"ghpo1\" class=\"h-full col-span-2 \" />\n  </div>\n</template>"}]}]},"nodeType":"block"},{"uid":"vXiggnAqDL","position":{"x":350,"y":1120},"sizes":{"width":400,"height":109},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","content":[{"type":"text","marks":[{"type":"bold"}],"text":"modules/metrics/GhPrCount.vue"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"},{"uid":"39Bjj1hf92","position":{"x":350,"y":960},"sizes":{"width":400,"height":109},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","content":[{"type":"text","marks":[{"type":"bold"}],"text":"modules/metrics/GhPrTime.vue"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"},{"uid":"X6IOn6KYL5","position":{"x":350,"y":1270},"sizes":{"width":400,"height":109},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","content":[{"type":"text","marks":[{"type":"bold"}],"text":"modules/metrics/GhCommitReview.vue"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"},{"uid":"Cy37gFG8GG","position":{"x":350,"y":1580},"sizes":{"width":400,"height":109},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","content":[{"type":"text","marks":[{"type":"bold"}],"text":"modules/metrics/GhReviewMerge.vue"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"},{"uid":"sAYFQK0PK8","position":{"x":350,"y":1420},"sizes":{"width":400,"height":109},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","content":[{"type":"text","marks":[{"type":"bold"}],"text":"modules/metrics/GhPrOpening.vue"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"},{"uid":"Nkm-yzR51j","position":{"x":880,"y":1160},"sizes":{"width":400,"height":200},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"filePathNode","content":[{"type":"text","marks":[{"type":"bold"}],"text":"components/charts/types.ts"}]},{"type":"codeBlock","attrs":{"language":"typescript"},"content":[{"type":"text","text":"interface Dataset {\n  label: string,\n  data: any\n  dataType: 'date' | 'number' | 'string'\n  mainColor: string\n}\n\ninterface Label {\n  data: any\n  dataType: 'date' | 'number' | 'string'\n  axisLabel: string\n}\n\ninterface ChartData {\n  label: Label,\n  datasets: Dataset[],\n  firstYaxis?: {\n    label: string\n  }\n}\n\ninterface TableData {\n  label: string,\n  rows: any\n}\n\ninterface LegendItem {\n  datasetIndex: number\n  fillStyle: string\n  fontColor: string\n  hidden: boolean\n  text: string\n}\n\nexport type {\n  Dataset,\n  Label,\n  ChartData,\n  TableData,\n  LegendItem\n}\n"}]}]},"color":{"bgColor":"hsla(19, 31%, 31%, 1)","bgName":"orange"},"nodeType":"block"},{"uid":"--Cj_hNIIw","position":{"x":493.8982930004579,"y":2291.6027897425183},"sizes":{"width":400,"height":109},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","attrs":{"pathToFile":"src/lib/notion/","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"client.ts"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"},{"uid":"VrxmDJlvf1","position":{"x":493.8982930004579,"y":2291.6027897425183},"sizes":{"width":400,"height":109},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","attrs":{"pathToFile":"src/lib/notion/","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"client.ts"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"},{"uid":"0qMN9s2lwd","position":{"x":493.8982930004579,"y":2291.6027897425183},"sizes":{"width":400,"height":20209.5},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","attrs":{"pathToFile":"src/lib/notion/","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"client.ts"}]},{"type":"codeBlock","attrs":{"language":"typescript","wrapCode":true},"content":[{"type":"text","text":"/**\n * RxJS-based Notion API Client\n *\n * Infrastructure layer for Notion API integration using RxJS Observables\n * for reactive state management and asynchronous operations.\n *\n * Key Features:\n * - Full TypeScript support with proper Notion API types\n * - Reactive streams with RxJS Observables\n * - Comprehensive error handling with custom error types\n * - Rate limiting support with retry information\n * - Property item transformation with support for both object and list responses\n * - Caching with BehaviorSubjects for real-time updates\n * - Parallel processing capabilities\n * - Logging and debugging capabilities\n */\n\nimport { Client } from \"@notionhq/client\";\nimport { QueryDatabaseParameters, SearchParameters } from \"@notionhq/client/build/src/api-endpoints\";\nimport { BehaviorSubject, Observable, Subject, defer, forkJoin, from, merge, of, throwError } from \"rxjs\";\nimport {\n  bufferCount,\n  catchError,\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  map,\n  retry,\n  shareReplay,\n  switchMap,\n  takeUntil,\n  tap,\n  throttleTime,\n  timeout\n} from \"rxjs/operators\";\nimport { NotionConfig, RateLimitInfo } from \"src/shared/types\";\nimport { RateLimitError } from \"../../shared/errors/index\";\nimport { log } from \"../log\";\nimport { transformers } from \"./transformers\";\nimport {\n  NotionBlock,\n  NotionComment,\n  NotionDatabase,\n  NotionFilteredSearchResult,\n  NotionPage,\n  NotionProperty,\n  NotionPropertyItem,\n  NotionQueryResult,\n  NotionSearchEvent,\n  NotionSearchEventConfig,\n  NotionSearchResponse,\n  NotionUser,\n  NotionWorkspace\n} from \"./types\";\n\nexport interface NotionApiClient {\n  // Core API methods\n  getPage(pageId: string): Observable<NotionPage>;\n  getDatabase(databaseId: string): Observable<NotionDatabase>;\n  getDatabases(query?: string): Observable<NotionDatabase[]>;\n  queryDatabase(params: QueryDatabaseParameters): Observable<NotionQueryResult<NotionPage>>;\n  getBlocks(blockId: string): Observable<NotionBlock[]>;\n  getUsers(): Observable<NotionUser[]>;\n  search<T extends SearchParameters>(params: T): Observable<NotionSearchResponse<T>>;\n  getComments(blockId: string): Observable<NotionComment[]>;\n  getPropertyItem(pageId: string, propertyId: string): Observable<NotionPropertyItem>;\n  getWorkspace(): Observable<NotionWorkspace>;\n  getDatabaseProperties(databaseId: string): Observable<NotionProperty[]>;\n  getPageProperties(pageId: string): Observable<NotionProperty[]>;\n  getBlockChildren(blockId: string): Observable<NotionBlock[]>;\n\n  // Batch operations for parallelism\n  getPages(pageIds: string[]): Observable<NotionPage[]>;\n  getDatabasesById(databaseIds: string[]): Observable<NotionDatabase[]>;\n  getMultipleBlocks(blockIds: string[]): Observable<NotionBlock[][]>;\n\n  // Streaming operations\n  searchAll<T extends SearchParameters>(params: T): Observable<NotionFilteredSearchResult<T>>;\n  queryDatabaseAll(params: QueryDatabaseParameters): Observable<NotionPage>;\n  getAllBlocks(blockId: string): Observable<NotionBlock>;\n\n  // Event dispatching\n  searchEvents$<T extends SearchParameters>(\n    params: T,\n    config?: NotionSearchEventConfig\n  ): Observable<NotionSearchEvent<T>>;\n\n  // Real-time subscriptions\n  pageUpdates$(pageId: string): Observable<NotionPage>;\n  databaseUpdates$(databaseId: string): Observable<NotionDatabase>;\n  rateLimitUpdates$(): Observable<RateLimitInfo>;\n\n  // Utility methods\n  getRateLimitInfo(): RateLimitInfo | null;\n  clearCache(): void;\n  destroy(): void;\n\n  // Namespaced API methods\n  readonly pages: {\n    retrieve: (pageId: string) => Observable<NotionPage>;\n    retrieveMany: (pageIds: string[]) => Observable<NotionPage[]>;\n    properties: {\n      retrieve: (pageId: string, propertyId: string) => Observable<NotionPropertyItem>;\n      list: (pageId: string) => Observable<NotionProperty[]>;\n    };\n    blocks: {\n      children: {\n        list: (blockId: string) => Observable<NotionBlock[]>;\n        listAll: (blockId: string) => Observable<NotionBlock>;\n      };\n    };\n    comments: {\n      list: (blockId: string) => Observable<NotionComment[]>;\n    };\n  };\n\n  readonly databases: {\n    retrieve: (databaseId: string) => Observable<NotionDatabase>;\n    retrieveMany: (databaseIds: string[]) => Observable<NotionDatabase[]>;\n    search: (query?: string) => Observable<NotionDatabase[]>;\n    query: (params: QueryDatabaseParameters) => Observable<NotionQueryResult<NotionPage>>;\n    queryAll: (params: QueryDatabaseParameters) => Observable<NotionPage>;\n    properties: {\n      list: (databaseId: string) => Observable<NotionProperty[]>;\n    };\n  };\n\n  readonly blocks: {\n    children: {\n      list: (blockId: string) => Observable<NotionBlock[]>;\n      listAll: (blockId: string) => Observable<NotionBlock>;\n    };\n  };\n\n  readonly users: {\n    list: () => Observable<NotionUser[]>;\n    me: () => Observable<NotionUser>;\n  };\n\n  readonly workspace: {\n    retrieve: () => Observable<NotionWorkspace>;\n  };\n}\n\nexport class NotionClient implements NotionApiClient {\n  private client: Client;\n  private rateLimitInfo: RateLimitInfo | null = null;\n  private rateLimitSubject = new BehaviorSubject<RateLimitInfo | null>(null);\n  private destroy$ = new Subject<void>();\n\n  // Event dispatching subjects\n  private searchEventSubjects = new Map<string, Subject<NotionSearchEvent<any>>>();\n\n  // Cache subjects for real-time updates\n  private pageCache = new Map<string, BehaviorSubject<NotionPage | null>>();\n  private databaseCache = new Map<string, BehaviorSubject<NotionDatabase | null>>();\n  private blockCache = new Map<string, BehaviorSubject<NotionBlock[] | null>>();\n  private userCache = new BehaviorSubject<NotionUser[] | null>(null);\n  private workspaceCache = new BehaviorSubject<NotionWorkspace | null>(null);\n\n  // Shared observables for frequently accessed data.\n  private sharedUsers$: Observable<NotionUser[]>;\n  private sharedWorkspace$: Observable<NotionWorkspace>;\n\n  constructor(private config: NotionConfig) {\n    this.client = new Client({\n      auth: config.apiKey,\n      baseUrl: config.baseUrl ?? \"https://api.notion.com\",\n      timeoutMs: config.timeout ?? 30000\n    });\n\n    // Initialize shared observables.\n    this.sharedUsers$ = this.createSharedUsers();\n    this.sharedWorkspace$ = this.createSharedWorkspace();\n  }\n\n  // Core API methods\n  getPage(pageId: string): Observable<NotionPage> {\n    return this.pages.retrieve(pageId);\n  }\n\n  getDatabase(databaseId: string): Observable<NotionDatabase> {\n    return this.databases.retrieve(databaseId);\n  }\n\n  getDatabases(query?: string): Observable<NotionDatabase[]> {\n    return this.databases.search(query);\n  }\n\n  queryDatabase(params: QueryDatabaseParameters): Observable<NotionQueryResult<NotionPage>> {\n    return this.databases.query(params);\n  }\n\n  getBlocks(blockId: string): Observable<NotionBlock[]> {\n    return this.blocks.children.list(blockId);\n  }\n\n  getUsers(): Observable<NotionUser[]> {\n    return this.users.list();\n  }\n\n  search<T extends SearchParameters>(params: T): Observable<NotionSearchResponse<T>> {\n    return this.execute(`search(${JSON.stringify(params)})`, () => this.client.search(params)).pipe(\n      map((response) => {\n        const results = response.results.map((result: any) => {\n          if (result.object === \"page\") {\n            return result as NotionFilteredSearchResult<T>;\n          } else if (result.object === \"database\") {\n            return result as NotionFilteredSearchResult<T>;\n          } else {\n            throw new Error(`Unsupported object type: ${result.object}`, { cause: result });\n          }\n        });\n        return {\n          results,\n          hasMore: response.has_more,\n          nextCursor: response.next_cursor || undefined,\n          pageInfo: {\n            currentPage: 1,\n            pageSize: params.page_size || 10\n          }\n        };\n      })\n    );\n  }\n\n  getComments(blockId: string): Observable<NotionComment[]> {\n    return this.pages.comments.list(blockId);\n  }\n\n  getPropertyItem(pageId: string, propertyId: string): Observable<NotionPropertyItem> {\n    return this.pages.properties.retrieve(pageId, propertyId);\n  }\n\n  getWorkspace(): Observable<NotionWorkspace> {\n    return this.workspace.retrieve();\n  }\n\n  getDatabaseProperties(databaseId: string): Observable<NotionProperty[]> {\n    return this.databases.properties.list(databaseId);\n  }\n\n  getPageProperties(pageId: string): Observable<NotionProperty[]> {\n    return this.pages.properties.list(pageId);\n  }\n\n  getBlockChildren(blockId: string): Observable<NotionBlock[]> {\n    return this.blocks.children.list(blockId);\n  }\n\n  // Batch operations for parallelism\n  getPages(pageIds: string[]): Observable<NotionPage[]> {\n    return this.pages.retrieveMany(pageIds);\n  }\n\n  getDatabasesById(databaseIds: string[]): Observable<NotionDatabase[]> {\n    return this.databases.retrieveMany(databaseIds);\n  }\n\n  getMultipleBlocks(blockIds: string[]): Observable<NotionBlock[][]> {\n    return forkJoin(blockIds.map((blockId) => this.getBlocks(blockId)));\n  }\n\n  // Streaming operations\n  searchAll<T extends SearchParameters>(params: T): Observable<NotionFilteredSearchResult<T>> {\n    return this.createPaginatedStream(\n      (cursor?: string) => this.search({ ...params, start_cursor: cursor }),\n      (response) => response.results,\n      (response) => response.hasMore,\n      (response) => response.nextCursor\n    );\n  }\n\n  queryDatabaseAll(params: QueryDatabaseParameters): Observable<NotionPage> {\n    return this.databases.queryAll(params);\n  }\n\n  getAllBlocks(blockId: string): Observable<NotionBlock> {\n    return this.blocks.children.listAll(blockId);\n  }\n\n  // Event dispatching\n  searchEvents$<T extends SearchParameters>(\n    params: T,\n    config: NotionSearchEventConfig = {}\n  ): Observable<NotionSearchEvent<T>> {\n    const searchKey = JSON.stringify(params);\n\n    if (!this.searchEventSubjects.has(searchKey)) {\n      const subject = new Subject<NotionSearchEvent<T>>();\n      this.searchEventSubjects.set(searchKey, subject);\n\n      // Start the search operation in the background\n      this.executeSearchWithEvents(params, config, subject);\n    }\n\n    const eventStream = this.searchEventSubjects.get(searchKey)!.asObservable();\n\n    // Apply throttling if configured\n    if (config.throttleMs) {\n      return eventStream.pipe(throttleTime(config.throttleMs), takeUntil(this.destroy$));\n    }\n\n    // Apply batching if configured\n    if (config.batchSize) {\n      return eventStream.pipe(\n        filter((event) => event.type === \"result\"), // Only batch result events\n        bufferCount(config.batchSize),\n        map((events) => {\n          const batchedData: NotionFilteredSearchResult<T>[] = [];\n          events.forEach((event) => {\n            if (Array.isArray(event.data)) {\n              batchedData.push(...(event.data as NotionFilteredSearchResult<T>[]));\n            } else {\n              batchedData.push(event.data as NotionFilteredSearchResult<T>);\n            }\n          });\n\n          return {\n            type: \"result\" as const,\n            data: batchedData,\n            metadata: {\n              pageNumber: events[events.length - 1]?.metadata.pageNumber || 1,\n              totalResults: batchedData.length,\n              hasMore: events[events.length - 1]?.metadata.hasMore || false,\n              cursor: events[events.length - 1]?.metadata.cursor,\n              timestamp: new Date()\n            }\n          };\n        }),\n        takeUntil(this.destroy$)\n      );\n    }\n\n    return eventStream.pipe(takeUntil(this.destroy$));\n  }\n\n  /**\n   * Executes a search operation with event dispatching.\n   *\n   * @param params - The search parameters.\n   * @param config - Event dispatching configuration.\n   * @param subject - The subject to emit events to.\n   */\n  private executeSearchWithEvents<T extends SearchParameters>(\n    params: T,\n    config: NotionSearchEventConfig,\n    subject: Subject<NotionSearchEvent<T>>\n  ): void {\n    let pageNumber = 1;\n    let totalResults = 0;\n    let cursor: string | undefined;\n\n    const fetchNextPage = () => {\n      const searchParams = { ...params, start_cursor: cursor };\n\n      this.search(searchParams)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe({\n          next: (response) => {\n            // Emit individual result events\n            response.results.forEach((result) => {\n              subject.next({\n                type: \"result\",\n                data: result,\n                metadata: {\n                  pageNumber,\n                  totalResults: ++totalResults,\n                  hasMore: response.hasMore,\n                  cursor: response.nextCursor,\n                  timestamp: new Date()\n                }\n              });\n            });\n\n            // Emit page complete event\n            subject.next({\n              type: \"page_complete\",\n              data: response.results,\n              metadata: {\n                pageNumber,\n                totalResults,\n                hasMore: response.hasMore,\n                cursor: response.nextCursor,\n                timestamp: new Date()\n              }\n            });\n\n            // Continue pagination if there are more results\n            if (response.hasMore && response.nextCursor) {\n              cursor = response.nextCursor;\n              pageNumber++;\n              fetchNextPage();\n            } else {\n              // Emit search complete event\n              subject.next({\n                type: \"search_complete\",\n                data: [],\n                metadata: {\n                  pageNumber,\n                  totalResults,\n                  hasMore: false,\n                  cursor: undefined,\n                  timestamp: new Date()\n                }\n              });\n              subject.complete();\n            }\n          },\n          error: (error) => {\n            subject.next({\n              type: \"error\",\n              data: error,\n              metadata: {\n                pageNumber,\n                totalResults,\n                hasMore: false,\n                cursor,\n                timestamp: new Date()\n              }\n            });\n            subject.error(error);\n          }\n        });\n    };\n\n    fetchNextPage();\n  }\n\n  // Real-time subscriptions\n  pageUpdates$(pageId: string): Observable<NotionPage> {\n    if (!this.pageCache.has(pageId)) {\n      this.pageCache.set(pageId, new BehaviorSubject<NotionPage | null>(null));\n      // Load initial data\n      this.getPage(pageId).subscribe((page) => {\n        this.pageCache.get(pageId)?.next(page);\n      });\n    }\n\n    return this.pageCache\n      .get(pageId)!\n      .asObservable()\n      .pipe(\n        filter((page): page is NotionPage => page !== null),\n        distinctUntilChanged(),\n        takeUntil(this.destroy$)\n      );\n  }\n\n  databaseUpdates$(databaseId: string): Observable<NotionDatabase> {\n    if (!this.databaseCache.has(databaseId)) {\n      this.databaseCache.set(databaseId, new BehaviorSubject<NotionDatabase | null>(null));\n      // Load initial data\n      this.getDatabase(databaseId).subscribe((database) => {\n        this.databaseCache.get(databaseId)?.next(database);\n      });\n    }\n\n    return this.databaseCache\n      .get(databaseId)!\n      .asObservable()\n      .pipe(\n        filter((database): database is NotionDatabase => database !== null),\n        distinctUntilChanged(),\n        takeUntil(this.destroy$)\n      );\n  }\n\n  rateLimitUpdates$(): Observable<RateLimitInfo> {\n    return this.rateLimitSubject.asObservable().pipe(\n      filter((info): info is RateLimitInfo => info !== null),\n      distinctUntilChanged(),\n      takeUntil(this.destroy$)\n    );\n  }\n\n  // Utility methods\n  getRateLimitInfo(): RateLimitInfo | null {\n    return this.rateLimitInfo;\n  }\n\n  clearCache(): void {\n    this.pageCache.forEach((subject) => subject.next(null));\n    this.databaseCache.forEach((subject) => subject.next(null));\n    this.blockCache.forEach((subject) => subject.next(null));\n    this.userCache.next(null);\n    this.workspaceCache.next(null);\n  }\n\n  destroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n\n    // Complete all cache subjects\n    this.pageCache.forEach((subject) => subject.complete());\n    this.pageCache.clear();\n\n    this.databaseCache.forEach((subject) => subject.complete());\n    this.databaseCache.clear();\n\n    this.blockCache.forEach((subject) => subject.complete());\n    this.blockCache.clear();\n\n    // Complete all search event subjects\n    this.searchEventSubjects.forEach((subject) => subject.complete());\n    this.searchEventSubjects.clear();\n\n    this.userCache.complete();\n    this.workspaceCache.complete();\n    this.rateLimitSubject.complete();\n  }\n\n  // Namespaced API methods\n  readonly pages = {\n    retrieve: (pageId: string): Observable<NotionPage> => {\n      return this.execute(`pages.retrieve(${pageId})`, () =>\n        this.client.pages.retrieve({ page_id: pageId }).then((res) => transformers.page(res))\n      ).pipe(\n        tap((page) => {\n          // Update cache\n          if (this.pageCache.has(pageId)) {\n            this.pageCache.get(pageId)!.next(page);\n          }\n        })\n      );\n    },\n\n    retrieveMany: (pageIds: string[]): Observable<NotionPage[]> => {\n      return forkJoin(pageIds.map((pageId) => this.pages.retrieve(pageId)));\n    },\n\n    properties: {\n      retrieve: (pageId: string, propertyId: string): Observable<NotionPropertyItem> => {\n        return this.execute(`pages.properties.retrieve(${pageId}, ${propertyId})`, () =>\n          this.client.pages.properties\n            .retrieve({ page_id: pageId, property_id: propertyId })\n            .then((res) => transformers.propertyItem(res))\n        );\n      },\n\n      list: (pageId: string): Observable<NotionProperty[]> => {\n        return this.pages.retrieve(pageId).pipe(\n          map((page) => {\n            if (!page.properties) return [];\n            return Object.entries(page.properties).map(([name, property]: [string, any]) => ({\n              id: property.id,\n              name,\n              type: property.type,\n              ...property\n            }));\n          })\n        );\n      }\n    },\n\n    blocks: {\n      children: {\n        list: (blockId: string): Observable<NotionBlock[]> => {\n          return this.blocks.children.list(blockId);\n        },\n\n        listAll: (blockId: string): Observable<NotionBlock> => {\n          return this.blocks.children.listAll(blockId);\n        }\n      }\n    },\n\n    comments: {\n      list: (blockId: string): Observable<NotionComment[]> => {\n        return this.execute(`comments.list(${blockId})`, () =>\n          this.client.comments\n            .list({ block_id: blockId })\n            .then((res) => res.results.map((comment) => transformers.comment(comment)))\n        );\n      }\n    }\n  };\n\n  readonly databases = {\n    retrieve: (databaseId: string): Observable<NotionDatabase> => {\n      return this.execute(`databases.retrieve(${databaseId})`, () =>\n        this.client.databases.retrieve({ database_id: databaseId }).then((res) => transformers.database(res))\n      ).pipe(\n        tap((database) => {\n          // Update cache\n          if (this.databaseCache.has(databaseId)) {\n            this.databaseCache.get(databaseId)!.next(database);\n          }\n        })\n      );\n    },\n\n    retrieveMany: (databaseIds: string[]): Observable<NotionDatabase[]> => {\n      return forkJoin(databaseIds.map((databaseId) => this.databases.retrieve(databaseId)));\n    },\n\n    search: (query?: string): Observable<NotionDatabase[]> => {\n      return this.execute(`databases.search(${query})`, () =>\n        this.client\n          .search({\n            query,\n            filter: { property: \"object\", value: \"database\" }\n          })\n          .then((res) => res.results.map((result) => transformers.database(result)))\n      );\n    },\n\n    query: (params: QueryDatabaseParameters): Observable<NotionQueryResult<NotionPage>> => {\n      return this.execute(`databases.query(${params.database_id})`, () =>\n        this.client.databases.query(params).then((res) => ({\n          results: res.results.map((page) => transformers.page(page)),\n          hasMore: res.has_more,\n          nextCursor: res.next_cursor || undefined\n        }))\n      );\n    },\n\n    queryAll: (params: QueryDatabaseParameters): Observable<NotionPage> => {\n      return this.createPaginatedStream(\n        (cursor?: string) => this.databases.query({ ...params, start_cursor: cursor }),\n        (response) => response.results,\n        (response) => response.hasMore,\n        (response) => response.nextCursor\n      );\n    },\n\n    properties: {\n      list: (databaseId: string): Observable<NotionProperty[]> => {\n        return this.databases.retrieve(databaseId).pipe(\n          map((database) =>\n            Object.entries(database.properties).map(([name, property]: [string, any]) => ({\n              id: property.id,\n              name,\n              type: property.type,\n              ...property\n            }))\n          )\n        );\n      }\n    }\n  };\n\n  readonly blocks = {\n    children: {\n      list: (blockId: string): Observable<NotionBlock[]> => {\n        return this.execute(`blocks.children.list(${blockId})`, () =>\n          this.client.blocks.children\n            .list({ block_id: blockId })\n            .then((res) => res.results.map((block) => transformers.block(block)))\n        ).pipe(\n          tap((blocks) => {\n            // Update cache\n            if (this.blockCache.has(blockId)) {\n              this.blockCache.get(blockId)!.next(blocks);\n            }\n          })\n        );\n      },\n\n      listAll: (blockId: string): Observable<NotionBlock> => {\n        return this.createPaginatedStream(\n          (cursor?: string) =>\n            this.execute(`blocks.children.list(${blockId}, ${cursor})`, () =>\n              this.client.blocks.children\n                .list({\n                  block_id: blockId,\n                  start_cursor: cursor || undefined\n                })\n                .then((res) => ({\n                  results: res.results.map((block) => transformers.block(block)),\n                  hasMore: res.has_more,\n                  nextCursor: res.next_cursor || undefined\n                }))\n            ),\n          (response) => response.results,\n          (response) => response.hasMore,\n          (response) => response.nextCursor\n        );\n      }\n    }\n  };\n\n  readonly users = {\n    list: (): Observable<NotionUser[]> => {\n      return this.sharedUsers$;\n    },\n\n    me: (): Observable<NotionUser> => {\n      return this.execute(`users.me()`, () => this.client.users.me({}).then((res) => transformers.user(res)));\n    }\n  };\n\n  readonly workspace = {\n    retrieve: (): Observable<NotionWorkspace> => {\n      return this.sharedWorkspace$;\n    }\n  };\n\n  // Private helper methods\n  private createSharedUsers(): Observable<NotionUser[]> {\n    return this.execute(`users.list()`, () =>\n      this.client.users.list({}).then((res) => res.results.map((user) => transformers.user(user)))\n    ).pipe(\n      tap((users) => this.userCache.next(users)),\n      shareReplay(1),\n      takeUntil(this.destroy$)\n    );\n  }\n\n  private createSharedWorkspace(): Observable<NotionWorkspace> {\n    return this.execute(`workspace.retrieve()`, () =>\n      this.client.users.me({}).then((res) => ({\n        id: \"personal\",\n        name: res.name || \"Personal Workspace\",\n        owner: res.id,\n        createdTime: new Date().toString()\n      }))\n    ).pipe(\n      tap((workspace) => this.workspaceCache.next(workspace)),\n      shareReplay(1),\n      takeUntil(this.destroy$)\n    );\n  }\n\n  private createPaginatedStream<T, R>(\n    fetcher: (cursor?: string) => Observable<{ results: R[]; hasMore: boolean; nextCursor?: string }>,\n    resultExtractor: (response: { results: R[]; hasMore: boolean; nextCursor?: string }) => R[],\n    hasMoreExtractor: (response: { results: R[]; hasMore: boolean; nextCursor?: string }) => boolean,\n    nextCursorExtractor: (response: { results: R[]; hasMore: boolean; nextCursor?: string }) => string | undefined\n  ): Observable<R> {\n    return defer(() => {\n      let cursor: string | undefined;\n\n      const fetchNext = (): Observable<R> => {\n        return fetcher(cursor).pipe(\n          switchMap((response) => {\n            const results = resultExtractor(response);\n            const hasMore = hasMoreExtractor(response);\n            cursor = nextCursorExtractor(response);\n\n            if (hasMore && cursor) {\n              return merge(from(results), fetchNext());\n            } else {\n              return from(results);\n            }\n          })\n        );\n      };\n\n      return fetchNext();\n    });\n  }\n\n  private execute<T>(operation: string, fn: () => Promise<T>): Observable<T> {\n    log.debug(`Executing Notion API call: ${operation}`);\n\n    return defer(fn).pipe(\n      timeout(this.config.timeout || 30000),\n      retry({\n        count: this.config.retryAttempts || 3,\n        delay: (error, retryCount) => {\n          if (this.isRateLimitError(error)) {\n            const retryAfter = this.extractRetryAfter(error);\n            log.debug(`Rate limit hit, retrying after ${retryAfter}s (attempt ${retryCount})`);\n            return of(null).pipe(debounceTime(retryAfter * 1000));\n          }\n\n          // Exponential backoff for other errors\n          const delay = Math.min(1000 * Math.pow(2, retryCount - 1), 10000);\n          log.debug(`Retrying ${operation} after ${delay}ms (attempt ${retryCount})`);\n          return of(null).pipe(debounceTime(delay));\n        }\n      }),\n      tap(() => this.updateRateLimitFromResponse()),\n      catchError((error: any) => {\n        if (this.isRateLimitError(error)) {\n          return this.handleRateLimitError(error);\n        }\n\n        log.error(`Notion API call failed: ${operation}`, { error: error.message });\n        return throwError(() => transformers.error(error));\n      }),\n      takeUntil(this.destroy$)\n    );\n  }\n\n  private isRateLimitError(error: any): boolean {\n    return error?.code === \"rate_limited\" || error?.status === 429;\n  }\n\n  private extractRetryAfter(error: any): number {\n    return error.headers?.[\"retry-after\"] ? parseInt(error.headers[\"retry-after\"], 10) : 60;\n  }\n\n  private handleRateLimitError(error: any): Observable<never> {\n    const retryAfter = this.extractRetryAfter(error);\n\n    this.rateLimitInfo = {\n      remaining: 0,\n      resetTime: new Date(Date.now() + retryAfter * 1000),\n      retryAfter\n    };\n\n    this.rateLimitSubject.next(this.rateLimitInfo);\n\n    const rateLimitError = new RateLimitError(`Rate limit exceeded. Retry after ${retryAfter} seconds.`, retryAfter);\n\n    return throwError(() => rateLimitError);\n  }\n\n  private updateRateLimitFromResponse(): void {\n    // Clear rate limit info on successful requests if reset time has passed\n    if (this.rateLimitInfo && this.rateLimitInfo.resetTime < new Date()) {\n      this.rateLimitInfo = null;\n      this.rateLimitSubject.next(null);\n    }\n  }\n}\n"}]}]},"nodeType":"block"}],"configs":{"centerX":193.991129639219,"centerY":-1897.6930811893794,"zoomLevel":0.17799275716145835},"arrowData":{"arrowsMap":{"arrow-point-bI0wBh3Ufk-bottom-point-PSPLIYKa9J-top":{"to":"point-PSPLIYKa9J-top","from":"point-bI0wBh3Ufk-bottom","label":"Normal Box","direction":"ft","selectable":true},"arrow-point-bI0wBh3Ufk-bottom-point-ytXK_ayIc1-top":{"to":"point-ytXK_ayIc1-top","from":"point-bI0wBh3Ufk-bottom","label":"Code Box","direction":"ft","selectable":true},"arrow-point-hyyRZE3E8u-right-point-6ZopTaEaDZ-left":{"to":"point-6ZopTaEaDZ-left","from":"point-hyyRZE3E8u-right","label":"call","direction":"ft","selectable":true}},"pointsMap":{"point-PSPLIYKa9J-top":{"x":805.9999797489683,"y":60,"id":"point-PSPLIYKa9J-top","direction":"top"},"point-ytXK_ayIc1-top":{"x":205.99999493724206,"y":60,"id":"point-ytXK_ayIc1-top","direction":"top"},"point-6ZopTaEaDZ-left":{"x":220,"y":605.9999898744841,"id":"point-6ZopTaEaDZ-left","direction":"left"},"point-hyyRZE3E8u-right":{"x":100,"y":606,"id":"point-hyyRZE3E8u-right","direction":"right"},"point-bI0wBh3Ufk-bottom":{"x":515.9999797489683,"y":-40,"id":"point-bI0wBh3Ufk-bottom","direction":"bottom"}},"edgesMap":{"arrow-point-bI0wBh3Ufk-bottom-point-ytXK_ayIc1-top":{"uid":"arrow-point-bI0wBh3Ufk-bottom-point-ytXK_ayIc1-top","fromNodeId":"bI0wBh3Ufk","fromHandleId":"bI0wBh3Ufk-bottom","toNodeId":"ytXK_ayIc1","toHandleId":"ytXK_ayIc1-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"arrow-point-hyyRZE3E8u-right-point-6ZopTaEaDZ-left":{"uid":"arrow-point-hyyRZE3E8u-right-point-6ZopTaEaDZ-left","fromNodeId":"hyyRZE3E8u","fromHandleId":"hyyRZE3E8u-right","toNodeId":"6ZopTaEaDZ","toHandleId":"6ZopTaEaDZ-left","direction":"ft","selectable":true,"type":"solid","content":{"label":"call"}},"edge-ytXK_ayIc1-ytXK_ayIc1-bottom-hyyRZE3E8u-hyyRZE3E8u-top":{"uid":"edge-ytXK_ayIc1-ytXK_ayIc1-bottom-hyyRZE3E8u-hyyRZE3E8u-top","fromNodeId":"ytXK_ayIc1","fromHandleId":"ytXK_ayIc1-bottom","toNodeId":"hyyRZE3E8u","toHandleId":"hyyRZE3E8u-top","direction":"ft","selectable":true,"type":"solid","content":{"label":"Here is an example"}},"edge-ssl8nJUAUs-ssl8nJUAUs-right-39Bjj1hf92-39Bjj1hf92-left":{"uid":"edge-ssl8nJUAUs-ssl8nJUAUs-right-39Bjj1hf92-39Bjj1hf92-left","fromNodeId":"ssl8nJUAUs","fromHandleId":"ssl8nJUAUs-right","toNodeId":"39Bjj1hf92","toHandleId":"39Bjj1hf92-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-ssl8nJUAUs-ssl8nJUAUs-right-vXiggnAqDL-vXiggnAqDL-left":{"uid":"edge-ssl8nJUAUs-ssl8nJUAUs-right-vXiggnAqDL-vXiggnAqDL-left","fromNodeId":"ssl8nJUAUs","fromHandleId":"ssl8nJUAUs-right","toNodeId":"vXiggnAqDL","toHandleId":"vXiggnAqDL-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-ssl8nJUAUs-ssl8nJUAUs-right-X6IOn6KYL5-X6IOn6KYL5-left":{"uid":"edge-ssl8nJUAUs-ssl8nJUAUs-right-X6IOn6KYL5-X6IOn6KYL5-left","fromNodeId":"ssl8nJUAUs","fromHandleId":"ssl8nJUAUs-right","toNodeId":"X6IOn6KYL5","toHandleId":"X6IOn6KYL5-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-ssl8nJUAUs-ssl8nJUAUs-right-sAYFQK0PK8-sAYFQK0PK8-left":{"uid":"edge-ssl8nJUAUs-ssl8nJUAUs-right-sAYFQK0PK8-sAYFQK0PK8-left","fromNodeId":"ssl8nJUAUs","fromHandleId":"ssl8nJUAUs-right","toNodeId":"sAYFQK0PK8","toHandleId":"sAYFQK0PK8-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-ssl8nJUAUs-ssl8nJUAUs-right-Cy37gFG8GG-Cy37gFG8GG-left":{"uid":"edge-ssl8nJUAUs-ssl8nJUAUs-right-Cy37gFG8GG-Cy37gFG8GG-left","fromNodeId":"ssl8nJUAUs","fromHandleId":"ssl8nJUAUs-right","toNodeId":"Cy37gFG8GG","toHandleId":"Cy37gFG8GG-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-hyyRZE3E8u-hyyRZE3E8u-bottom-ssl8nJUAUs-ssl8nJUAUs-top":{"uid":"edge-hyyRZE3E8u-hyyRZE3E8u-bottom-ssl8nJUAUs-ssl8nJUAUs-top","fromNodeId":"hyyRZE3E8u","fromHandleId":"hyyRZE3E8u-bottom","toNodeId":"ssl8nJUAUs","toHandleId":"ssl8nJUAUs-top","direction":"ft","selectable":true,"type":"solid","content":{"label":"A more complex example"}},"edge-X6IOn6KYL5-X6IOn6KYL5-right-Nkm-yzR51j-Nkm-yzR51j-left":{"uid":"edge-X6IOn6KYL5-X6IOn6KYL5-right-Nkm-yzR51j-Nkm-yzR51j-left","fromNodeId":"X6IOn6KYL5","fromHandleId":"X6IOn6KYL5-right","toNodeId":"Nkm-yzR51j","toHandleId":"Nkm-yzR51j-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-vXiggnAqDL-vXiggnAqDL-right-Nkm-yzR51j-Nkm-yzR51j-left":{"uid":"edge-vXiggnAqDL-vXiggnAqDL-right-Nkm-yzR51j-Nkm-yzR51j-left","fromNodeId":"vXiggnAqDL","fromHandleId":"vXiggnAqDL-right","toNodeId":"Nkm-yzR51j","toHandleId":"Nkm-yzR51j-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-39Bjj1hf92-39Bjj1hf92-right-Nkm-yzR51j-Nkm-yzR51j-left":{"uid":"edge-39Bjj1hf92-39Bjj1hf92-right-Nkm-yzR51j-Nkm-yzR51j-left","fromNodeId":"39Bjj1hf92","fromHandleId":"39Bjj1hf92-right","toNodeId":"Nkm-yzR51j","toHandleId":"Nkm-yzR51j-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-sAYFQK0PK8-sAYFQK0PK8-right-Nkm-yzR51j-Nkm-yzR51j-left":{"uid":"edge-sAYFQK0PK8-sAYFQK0PK8-right-Nkm-yzR51j-Nkm-yzR51j-left","fromNodeId":"sAYFQK0PK8","fromHandleId":"sAYFQK0PK8-right","toNodeId":"Nkm-yzR51j","toHandleId":"Nkm-yzR51j-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-Cy37gFG8GG-Cy37gFG8GG-right-Nkm-yzR51j-Nkm-yzR51j-left":{"uid":"edge-Cy37gFG8GG-Cy37gFG8GG-right-Nkm-yzR51j-Nkm-yzR51j-left","fromNodeId":"Cy37gFG8GG","fromHandleId":"Cy37gFG8GG-right","toNodeId":"Nkm-yzR51j","toHandleId":"Nkm-yzR51j-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}}}}}}